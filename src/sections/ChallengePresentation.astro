---
import AnimateText from "../components/AnimateText.astro";
import HorizontalScrollContainer from "../components/HorizontalScrollContainer.astro";
import ArrowIcon from "../assets/Arrow.svg?raw";

import Challenge1Image from "../assets/IMG 21.png";
import Challenge2Image from "../assets/IMG 22.png";
import Challenge3Image from "../assets/IMG 23.png";
import { Image } from "astro:assets";

const content: [string, string, string, ImageMetadata][] = [
  [
    "Why care about taxes?",
    "An effective tax system not only raises revenues needed for funding public services, but can also support development goals, for example, by helping combat illicit financial flows, reducing inequality through redistribution, and addressing social and environmental objectives by influencing taxpayer behavior. You can see examples of funder theories of change for investing on tax reform here.",
    "https://tax.transparency-initiative.org/",
    Challenge1Image,
  ],
  [
    "Why care about sovereign debt?",
    "Global sovereign debt is fast rising on the global agenda due to impending debt crises in many developing countries. Debt Justice estimates that 54 countries are currently in debt crisis, while another 57 countries are at risk of a public or private debt crisis or both. Servicing debt eats up government budgets, meaning little is left to meet local needs.",
    "https://debtjustice.org.uk/countries-in-crisis",
    Challenge2Image,
  ],
  [
    "Why care about accountable, effective public spending?",
    "Too often public resources are being spent unfairly and ineffectively, leaving millions of people without access to quality public goods and services. Transparent and accountable spending is also more immune to corruption.",
    "#",
    Challenge3Image,
  ],
];
---

<section id="challenge-presentation">
  <HorizontalScrollContainer
    className="block overflow-y-hidden bg-[#0128A2] text-white md:flex md:h-svh md:items-center md:pl-[max(1rem,(100vw_-_1280px)_/_2)] pb-24 md:pb-0"
  >
    <h3 class="sr-only">
      <AnimateText textList={["The Challenge"]} />
    </h3>
    <ul
      class="challenge-content flex flex-col gap-y-16 px-6 md:flex-row md:pr-[max(1rem,(100vw_-_1280px)_/_2)]"
    >
      {
        content.map(([title, p, href, image]) => (
          <li class="z-10 flex flex-col-reverse justify-center gap-12 text-center opacity-0 first:opacity-100 md:mr-[15vw] md:min-w-[550px] md:flex-col md:text-left md:last:mr-0 md:odd:flex-col-reverse">
            <div class="max-w-[45ch]">
              <h3 class="mb-6 text-2xl font-bold uppercase tracking-tight 3xl:text-3xl">
                <AnimateText textList={[title]} />
              </h3>
              <p class="text-base 3xl:text-lg">{p}</p>
              <a
                target="_blank"
                href={href}
                class="group mx-auto mt-10 flex w-fit items-center gap-x-5 rounded-full bg-[#1672F7] p-1 pl-6 text-base text-white transition-colors hover:bg-[#1663D2] md:mx-0"
              >
                <span> More details </span>
                <span class="rotate-45 text-[#1672F7] transition-transform group-hover:rotate-0 [&>svg]:size-9 [&>svg]:fill-white">
                  <Fragment set:html={ArrowIcon} />
                </span>
              </a>
            </div>
            <div class="mx-auto aspect-square w-48 rounded-3xl bg-[#CDF1F3] md:mx-0 3xl:w-64">
              <Image
                class="bg-red size-full rounded-3xl object-contain object-top"
                alt="Welcome to the fiscal space"
                src={image}
              />
            </div>
          </li>
        ))
      }
    </ul>
    <svg
      class="rope left-0 hidden md:absolute md:block"
      width="2577"
      height="390"
      viewBox="0 0 1800 333"
      preserveAspectRatio="none"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0 1C332.5 1 474 315.5 838 331C1202 346.5 1440 1 1746.5 1C2053 1 2239 331 2577 331"
        stroke="#1672F7"
        stroke-width="2"></path>
    </svg>
  </HorizontalScrollContainer>
</section>

<script>
  import { animate, scroll, inView } from "motion";

  const cleanupFunctions: VoidFunction[] = [];

  initEventListeners();
  document.addEventListener("astro:after-swap", initEventListeners);
  document.addEventListener("astro:before-preparation", () => {
    cleanupFunctions.forEach((fn) => fn());
    cleanupFunctions.length = 0;
  });

  function initEventListeners() {
    const listElements = document.querySelectorAll(
      "#challenge-presentation .challenge-content > li"
    ) as NodeListOf<HTMLElement>;

    listElements.forEach((listElement, index) => {
      if (index === 0) return;
      const inViewCallback = inView(
        listElement,
        () => {
          window.innerWidth < 768
            ? animate(listElement, { opacity: [0, 1], y: [100, 0] })
            : animate(
                listElement,
                { opacity: [0, 1], x: [100, 0] },
                { ease: "easeOut" }
              );
        },
        {
          amount: 0.2,
        }
      );

      cleanupFunctions.push(inViewCallback);
    });

    const rope = document.querySelector(".rope") as SVGSVGElement | null;
    const ropePath = rope?.querySelector("path") as SVGPathElement | null;

    if (!rope || !ropePath) return;
    const wrapper = document.querySelector(
      "#challenge-presentation .horizontal-scroll-content-wrapper"
    ) as HTMLUListElement;

    const ropePathAnimation = animate(
      ropePath,
      {
        pathLength: [0.32, 1],
      },
      {
        ease: "linear",
      }
    );

    ropePathAnimation.pause();

    const scrollCallback = scroll(() => {
      const scroll = wrapper.scrollLeft;
      const width = wrapper.scrollWidth;
      const mult = 0.7;

      const progress = scroll / width;
      ropePathAnimation.time = progress * mult;
    });

    cleanupFunctions.push(scrollCallback);

    calculateRopeWidth();
    window.addEventListener("resize", calculateRopeWidth);

    function calculateRopeWidth() {
      if (!rope || !ropePath) return;
      if (window.innerWidth < 768) {
        rope.style.top = 0 + "px";
        rope.style.left = 0 + "px";
        rope.style.width = 0 + "px";
        rope.style.height = 0 + "px";
      }

      const from = document.querySelector(
        ".challenge-content > li:nth-child(1) .aspect-square"
      ) as HTMLElement;
      const through = document.querySelector(
        ".challenge-content > li:nth-child(2) .aspect-square"
      ) as HTMLElement;

      const to = document.querySelector(
        ".challenge-content > li:nth-last-child(1) .aspect-square"
      ) as HTMLElement;

      const ropeTop = from.offsetTop + from.offsetHeight / 2;
      const ropeLeft = from.offsetLeft + from.getBoundingClientRect().width;
      const ropeWidth = to.offsetLeft - ropeLeft;
      const ropeHeight =
        through.getBoundingClientRect().top - from.getBoundingClientRect().top;

      rope.style.top = ropeTop + "px";
      rope.style.left = ropeLeft + "px";
      rope.style.width = ropeWidth + "px";
      rope.style.height = ropeHeight + "px";
    }
  }
</script>

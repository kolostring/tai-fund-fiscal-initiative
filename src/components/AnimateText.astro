---
interface Props {
  className?: string;
  textList: string[];
  mobileTextList?: string[];
}

const { className, textList, mobileTextList } = Astro.props as Props;
---

<>
  <span class="animate-text-container">
    {
      mobileTextList?.map((text) => (
        <span class={`animate-text-mobile block ${className}`}>
          <span>{text}</span>
        </span>
      ))
    }

    {
      textList.map((text) => (
        <span class={`animate-text block ${className}`}>
          <span>{text}</span>
        </span>
      ))
    }
  </span>
</>

<style>
  .animate-text,
  .animate-text-mobile {
    @apply block overflow-y-hidden;
  }

  .animate-text > *,
  .animate-text-mobile > * {
    @apply block translate-y-full;
  }
</style>

<script>
  import { animate, inView } from "motion";

  const cleanupFunctions: VoidFunction[] = [];

  initEventListeners();
  document.addEventListener("astro:page-load", initEventListeners);
  document.addEventListener("astro:before-preparation", () => {
    cleanupFunctions.forEach((fn) => fn());
    cleanupFunctions.length = 0;
  });

  function initEventListeners() {
    const containers = document.querySelectorAll(
      ".animate-text"
    ) as NodeListOf<HTMLElement>;
    const mobileContainers = document.querySelectorAll(
      ".animate-text-mobile"
    ) as NodeListOf<HTMLElement>;

    const responsiveContainers = document.querySelectorAll(
      ".animate-text-mobile ~ .animate-text"
    ) as NodeListOf<HTMLElement>;

    initDisplay();
    window.matchMedia("(max-width: 768px)").addEventListener("change", () => {
      console.log("change");
      initDisplay();
    });

    containers.forEach((container) => {
      const text = container.querySelector("span") as HTMLElement;

      const inViewCallback = inView(
        container,
        () => {
          animate(
            text,
            {
              y: [text.offsetHeight, 0],
            },
            {
              ease: "easeOut",
              onComplete: () => {
                container.style.overflowY = "visible";
              },
            }
          );

          return () =>
            animate(
              text,
              { y: [0, -text.offsetHeight] },
              {
                duration: 0.15,
                ease: "easeIn",
                onPlay: () => {
                  container.style.overflowY = "hidden";
                },
              }
            );
        },
        {
          amount: 0,
        }
      );

      cleanupFunctions.push(inViewCallback);
    });

    mobileContainers.forEach((mobileContainer) => {
      const text = mobileContainer.querySelector("span") as HTMLElement;

      const inViewCallback = inView(
        mobileContainer,
        () => {
          animate(
            text,
            {
              y: [text.offsetHeight, 0],
            },
            {
              ease: "easeOut",
              onComplete: () => {
                mobileContainer.style.overflowY = "visible";
              },
            }
          );

          return () =>
            animate(
              text,
              { y: [0, -text.offsetHeight] },
              {
                duration: 0.15,
                ease: "easeIn",
                onPlay: () => {
                  mobileContainer.style.overflowY = "hidden";
                },
              }
            );
        },
        {
          amount: 0,
        }
      );

      cleanupFunctions.push(inViewCallback);
    });

    function initDisplay() {
      if (window.innerWidth < 768) {
        mobileContainers.forEach((mobileContainer) => {
          mobileContainer.style.display = "block";
        });
        responsiveContainers.forEach((responsiveContainer) => {
          responsiveContainer.style.display = "none";
        });
      } else {
        mobileContainers.forEach((mobileContainer) => {
          mobileContainer.style.display = "none";
        });
        responsiveContainers.forEach((responsiveContainer) => {
          responsiveContainer.style.display = "block";
        });
      }
    }
  }
</script>

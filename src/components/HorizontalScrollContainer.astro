---
const { containerClassName, className } = Astro.props;
---

<div
  class={`horizontal-scroll-container relative contain-paint ${containerClassName}`}
>
  <div
    class={`horizontal-scroll-content-wrapper overflow-x-hidden sticky top-0 ${className}`}
  >
    <slot />
  </div>
</div>

<script>
  import { scroll } from "motion";

  const cleanupFunctions: VoidFunction[] = [];

  initContainers();
  document.addEventListener("astro:page-load", initContainers);
  document.addEventListener("astro:before-preparation", ()=>{
    cleanupFunctions.forEach(fn=>fn());
    cleanupFunctions.length = 0;
  })

  function initContainers() {
    const containerList = document.querySelectorAll(
      ".horizontal-scroll-container"
    );

    containerList.forEach((container) => {
      const contentWrapper = container.querySelector(
        ".horizontal-scroll-content-wrapper"
      ) as HTMLUListElement;

      const updateContainerHeight = () => {
        if (!container) return;
        (container as HTMLDivElement).style.height =
          `${contentWrapper.scrollWidth}px`;
      };
      updateContainerHeight();
      window.addEventListener("resize", updateContainerHeight);

      const scrollCallback = scroll(
        (progress: number) => {
          const scrollMul = obtainScrollableSpace(container as HTMLElement, contentWrapper) * progress;
          contentWrapper.scrollTo({
            left: contentWrapper.scrollWidth * scrollMul,
          });
        },
        { target: container,  },
      );
      cleanupFunctions.push(scrollCallback);

      //ACCESSIBILITY
      contentWrapper
        .querySelectorAll("a, button, input, textarea")
        .forEach((focusable) => {
          (focusable as HTMLElement).addEventListener("focus", () => {
            const containerDocumentPosition =
              window.scrollY + container.getBoundingClientRect().top;
            const focusableLeftDistanceFromContentWrapper =
              focusable.getBoundingClientRect().left +
              contentWrapper.scrollLeft;

            window.scrollTo({
              top:
                containerDocumentPosition +
                focusableLeftDistanceFromContentWrapper,
            });
          });
        });
    });

    function obtainScrollableSpace(container: HTMLElement, contentWrapper: HTMLElement) {
      return 1 - (container.clientWidth) / contentWrapper.scrollWidth;
    }
  }
</script>

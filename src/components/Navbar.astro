---
import LogoIcon from "../assets/logo.svg?raw";

interface Props {
  className?: string;
}

const { className } = Astro.props as Props;
---

<div class="sticky top-0 z-[100]">
  <div
    id="navbar"
    class="absolute w-full -translate-y-full bg-opacity-60 py-2 text-sm uppercase text-black backdrop-blur"
  >
    <nav class={`mx-auto flex max-w-7xl justify-between py-1 ${className}`}>
      <ul
        class="flex w-full shrink-0 gap-6 md:items-center md:justify-between [&_a]:px-[1px] hover:[&_a]:px-0 hover:[&_a]:font-semibold hover:[&_a]:underline"
      >
        <li class="hidden md:block">
          <a href="/#opportunity-in-2025">The Opportunity in 2025</a>
        </li>
        <li class="hidden md:block">
          <a href="/#action-agenda">The Action Agenda</a>
        </li>
        <li>
          <a href="/#welcome-to-fiscal-space" class="[&_svg]:h-12 !px-0">
            <!-- <Image src={LogoIcon} alt="Logo" /> -->
            <Fragment set:html={LogoIcon} />
            <span class="!sr-only">Home</span>
          </a>
        </li>
        <li class="hidden md:block">
          <a href="/#what-funders-can-do">What Funders Can Do</a>
        </li>
        <li class="hidden md:block">
          <a href="/#fiscal-space-resources">The Fiscal Space Resources</a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  import { scroll } from "motion";

  const cleanupFunctions: VoidFunction[] = [];

  initEventListeners();
  document.addEventListener("astro:page-load", initEventListeners);
  document.addEventListener("astro:before-preparation", () => {
    cleanupFunctions.forEach((fn) => fn());
    cleanupFunctions.length = 0;
  });

  function initEventListeners() {
    const navbar = document.querySelector("#navbar") as HTMLDivElement | null;

    if (!navbar) return;
    let scrollPosition = 0;

    const scrollCallback = scroll((progress: number) => {
      const documentHeight = document.documentElement.scrollHeight;
      const scrolledPixels = progress * documentHeight;

      const delta = scrolledPixels - scrollPosition;
      scrollPosition = scrolledPixels;

      const oldTranslateY = getTranslateXY(navbar).translateY;

      const translateY = Math.max(
        -navbar.offsetHeight,
        Math.min(oldTranslateY - delta, 0)
      );

      const transformable =
        navbar.parentElement &&
        navbar.parentElement.getBoundingClientRect().top <= 0;

      navbar.style.transform = `translateY(${transformable ? translateY : 0}px)`;
      navbar.style.backgroundColor = transformable ? "white" : "transparent";
    });

    cleanupFunctions.push(scrollCallback);
  }

  function getTranslateXY(element: HTMLElement) {
    const style = window.getComputedStyle(element);
    const matrix = new DOMMatrixReadOnly(style.transform);
    return {
      translateX: matrix.m41,
      translateY: matrix.m42,
    };
  }
</script>

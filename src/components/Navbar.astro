---
import LogoIcon from "../assets/logo.svg?raw";

interface Props {
  className?: string;
}

const { className } = Astro.props as Props;
---

<div class="sticky top-0">
  <div
    id="navbar"
    class="absolute z-50 w-full -translate-y-full bg-[#0128A2] bg-opacity-60 py-2 text-white backdrop-blur"
  >
    <nav class={`mx-auto flex max-w-7xl justify-between py-1 ${className}`}>
      <a href="/">
        <!-- <Image src={LogoIcon} alt="Logo" /> -->
        <Fragment set:html={LogoIcon} />
      </a>

      <ul class="ml-auto flex shrink-0 items-center justify-evenly gap-6">
        <li>
          <a href="/urgent-oportunities">Urgent Oportunities</a>
        </li>
        <li>
          <a href="/creating-sustainable-fiscal-space"
            >Creating Sustainable Fiscal Space</a
          >
        </li>
        <li>
          <a href="/what-is-fiscal-space">What is Fiscal Space</a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  import { scroll } from "motion";

  const cleanupFunctions: VoidFunction[] = [];

  initEventListeners();
  document.addEventListener("astro:page-load", initEventListeners);
  document.addEventListener("astro:before-preparation", () => {
    cleanupFunctions.forEach((fn) => fn());
    cleanupFunctions.length = 0;
  });

  function initEventListeners() {
    const navbar = document.querySelector("#navbar") as HTMLDivElement | null;

    if (!navbar) return;
    let scrollPosition = 0;

    const scrollCallback = scroll((progress: number) => {
      const documentHeight = document.documentElement.scrollHeight;
      const scrolledPixels = progress * documentHeight;

      const delta = scrolledPixels - scrollPosition;
      scrollPosition = scrolledPixels;

      const oldTranslateY = getTranslateXY(navbar).translateY;

      const translateY = Math.max(
        -navbar.offsetHeight,
        Math.min(oldTranslateY - delta, 0)
      );

      const transformable =
        navbar.parentElement &&
        navbar.parentElement.getBoundingClientRect().top <= 0;

      navbar.style.transform = `translateY(${(transformable ? translateY : 0)}px)`;
    });

    cleanupFunctions.push(scrollCallback);
  }

  function getTranslateXY(element: HTMLElement) {
    const style = window.getComputedStyle(element);
    const matrix = new DOMMatrixReadOnly(style.transform);
    return {
      translateX: matrix.m41,
      translateY: matrix.m42,
    };
  }
</script>
